;***********************************************************************
;*   ___  ___  ___  ___  ___  ___   _    ___  _ _ _ 
;*  | . || __>|_ _|| __>| . \/  _> | |  | . || | | |
;*  |   || _>  | | | _> |   /| <_/\| |_ | | || | | |
;*  |_|_||_|   |_| |___>|_\_\`____/|___|`___'|__/_/ 
;*                                                  rp2040
;*      Copyright (c) 2024 bitfield labs
;*
;***********************************************************************
;*  This file is part of the afterglow pinball LED project:
;*  https://github.com/bitfieldlabs/afterglow
;*
;*  afterglow is free software: you can redistribute it and/or modify
;*  it under the terms of the GNU Lesser General Public License as
;*  published by the Free Software Foundation, either version 3 of the
;*  License, or (at your option) any later version.
;*
;*  afterglow is distributed in the hope that it will be useful,
;*  but WITHOUT ANY WARRANTY; without even the implied warranty of
;*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;*  GNU Lesser General Public License for more details.
;*
;*  You should have received a copy of the GNU Lesser General Public
;*  License along with afterglow.
;*  If not, see <http://www.gnu.org/licenses/>.
;***********************************************************************

.program matrixout
.wrap_target
    pull block            ; wait for new data in the FIFO
    out pins, 18
    out null, 14
.wrap                     ; there's no stopping!


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

#include "def.h"
#include "pindef.h"
#include "params.h"
#include "hardware/clocks.h"

// Cycle per matrix output, must match the PIO code above
#define CYCLE_PER_MATRIX_OUTPUT 3

void matrixout_program_init(PIO pio, uint sm, uint offset)
{
    const AG_PARAMS_t *pkPar = par_params();

    // initialize the output pins
    for (uint32_t i=0; i<NUM_COL_PINS; i++)
    {
        pio_gpio_init(pio, skAGColOutPins[i]);
    }
    for (uint32_t i=0; i<NUM_ROW_PINS; i++)
    {
        pio_gpio_init(pio, skAGRowOutPins[i]);
    }

    // output pins
    pio_sm_set_consecutive_pindirs(pio, sm, AGPIN_CO1, NUM_COL_PINS, true);
    pio_sm_set_consecutive_pindirs(pio, sm, AGPIN_RO1, NUM_ROW_PINS, true);

    // configure the state machine
    pio_sm_config c = matrixout_program_get_default_config(offset);
    sm_config_set_out_pins(&c, AGPIN_CO1, NUM_COL_PINS+NUM_ROW_PINS); // data out
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, true, false, 32);
    
    // run at (PWM resolution) * (MATRIX size) * (LED frequency) * (PIO cycles per output)
    float pio_freq = (pkPar->pwmRes * NUM_COL * pkPar->ledFreq * CYCLE_PER_MATRIX_OUTPUT);
    
    // adjust for the anti-ghosting off time
    // the goal is to have PWM_RES complete pio cycles for the row line PWM
    //
    //   ANTI       ROW
    //   GHOST      PWM
    // |---------|-----------------------------------------------------|
    //           |<------------------ PWM_RES steps ------------------>|
    // |<----------------------- TTAG_INT ---------------------------->|

    pio_freq *= ((float)pkPar->ledUpdateDur / (float)(pkPar->ledUpdateDur - pkPar->antiGhostDur));
    
    // calculate the divider value
    float div = (float)clock_get_hz(clk_sys) / pio_freq;
    sm_config_set_clkdiv(&c, div);

    // initialize and enable the state machine
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}